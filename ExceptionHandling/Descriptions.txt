//Harish Sune
//harishsune@hotmail.com
//22th March 2015

An exception is a problem that arises during the execution of a program. A C# exception is a response to an exceptional 
circumstance that arises while a program is running, such as an attempt to divide by zero.

Exceptions provide a way to transfer control from one part of a program to another. C# exception handling is built upon four
 keywords: try, catch, finally and throw.

try: A try block identifies a block of code for which particular exceptions will be activated. It's followed by one or more 
catch blocks.

catch: A program catches an exception with an exception handler at the place in a program where you want to handle the 
problem. The catch keyword indicates the catching of an exception.

finally: The finally block is used to execute a given set of statements, whether an exception is thrown or not thrown. For 
example, if you open a file, it must be closed whether an exception is raised or not.

throw: A program throws an exception when a problem shows up. This is done using a throw keyword.

Syntax
Assuming a block will raise and exception, a method catches an exception using a combination of the try and catch keywords. A 
try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as 
protected code, and the syntax.

You can have multiple catch block for a single try block. But there should be  at least one catch block or you can have only 
try and finally block.

Exception Classes in C#
C# exceptions are represented by classes. The exception classes in C# are mainly directly or indirectly derived from the System.Exception class. Some of the exception classes derived from the System.Exception class are the System.ApplicationException and System.SystemException classes.

The System.ApplicationException class supports exceptions generated by application programs. So the exceptions defined by the programmers should derive from this class.

The System.SystemException class is the base class for all predefined system exception.

The following table provides some of the predefined exception classes derived from the Sytem.SystemException class:

Exception Class										Description

System.IO.IOException								Handles I/O errors.

System.IndexOutOfRangeException						Handles errors generated when a method refers to an array index out of 
													range.

System.ArrayTypeMismatchException					Handles errors generated when type is mismatched with the array type.

System.NullReferenceException						Handles errors generated from deferencing a null object.

System.DivideByZeroException						Handles errors generated from dividing a dividend with zero.

System.InvalidCastException							Handles errors generated during typecasting.

System.OutOfMemoryException							Handles errors generated from insufficient free memory.

System.StackOverflowException						Handles errors generated from stack overflow.

Handling Exceptions
C# provides a structured solution to the exception handling problems in the form of try and catch blocks. Using these blocks 
the core program statements are separated from the error-handling statements.

Throwing Objects
You can throw an object if it is either directly or indirectly derived from the System.Exception class. You can use a throw statement in the catch block to throw the present object.

These error handling blocks are implemented using the try, catch and finally keywords.