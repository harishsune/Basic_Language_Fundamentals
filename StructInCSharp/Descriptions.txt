//Harish Sune
//harishsune@hotmail.com
//22th March 2015

In C#, a structure is a value type data type. It helps you to make a single variable hold related data of various data types. 
The struct keyword is used for creating a structure.

Structures are used to represent a record. Suppose you want to keep track of your books in a library. You might want to track
 the following attributes about each book:

Title

Author

Subject

Book ID

Defining a Structure
To define a structure, you must use the struct statement. The struct statement defines a new data type, with more than one 
member for your program.

Features of C# Structures
You have already used a simple structure named Books. Structures in C# are quite different from that in traditional C or C++.
 The C# structures have the following features:

Structures can have methods, fields, indexers, properties, operator methods, and events.

Structures can have defined constructors, but not destructors. However, you cannot define a default constructor for a 
structure. The default constructor is automatically defined and can't be changed.

Unlike classes, structures cannot inherit other structures or classes.

Structures cannot be used as a base for other structures or classes.

A structure can implement one or more interfaces.

Structure members cannot be specified as abstract, virtual, or protected.

When you create a struct object using the New operator, it gets created and the appropriate constructor is called. Unlike 
classes, structs can be instantiated without using the New operator.

If the New operator is not used, the fields will remain unassigned and the object cannot be used until all the fields are 
initialized.

Class vs Structure
Classes and Structures have the following basic differences:

classes are reference types and structs are value types

structures do not support inheritance

structures cannot have default constructor