//Harish Sune
//harishsune@hotmail.com
//22th March 2015

C# delegates are similar to pointers to functions, in C or C++. A delegate is a reference type variable that holds the 
reference to a method. The reference can be changed at runtime.

Delegates are especially used for implementing events and the call-back methods. All delegates are implicitly derived from the
 System.Delegate class.

Declaring Delegates
Delegate declaration determines the methods that can be referenced by the delegate. A delegate can refer to a method, which 
have the same signature as that of the delegate.

For example, consider a delegate:

public delegate int MyDelegate (string s);
The preceding delegate can be used to reference any method that has a single string parameter and returns an int type 
variable.

Syntax for delegate declaration is:

delegate <return type> <delegate-name> <parameter list>
Instantiating Delegates
Once a delegate type has been declared, a delegate object must be created with the new keyword and be associated with a 
particular method. When creating a delegate, the argument passed to the new expression is written like a method call, but 
without the arguments to the method. For example:

public delegate void printString(string s);
...
printString ps1 = new printString(WriteToScreen);
printString ps2 = new printString(WriteToFile);